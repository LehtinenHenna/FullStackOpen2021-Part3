{"version":3,"sources":["components/Person.js","services/persons.js","App.js","reportWebVitals.js","index.js"],"names":["Notification","message","success","className","DeleteButton","handler","id","text","onClick","PersonForm","handleAddPerson","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","value","onChange","type","PersonRender","person","filter","handleDeleteClick","upperFilter","toUpperCase","name","includes","number","PersonsRender","persons","map","Filter","handleFilterChange","baseUrl","personService","getAll","axios","get","then","response","data","create","newObject","post","update","put","remove","delete","App","useState","setPersons","setNewName","setNewNumber","setFilter","setMessage","setSuccess","useEffect","initialPersons","event","target","preventDefault","personObject","samePerson","find","window","confirm","returnedPerson","setTimeout","catch","error","p","isNaN","concat","personToDelete","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa4eeda6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Notification = ({ message, success}) => {\r\n  if (message === null) {\r\n    return (\r\n      <div className=\"messagePlaceHolder\"></div>\r\n    )\r\n  }\r\n  else if (success === true) {\r\n    return (\r\n      <div className=\"successMessage\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n  else if (success === false) {\r\n    return (\r\n      <div className=\"errorMessage\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst DeleteButton = ({handler, id, text}) => {\r\n  return (\r\n    <button onClick={() => handler(id)}>\r\n      {text}\r\n    </button>\r\n  )\r\n}\r\n\r\n// creating a form to post a new name and number to the phone book\r\nconst PersonForm = ({handleAddPerson, newName, newNumber, handleNameChange, handleNumberChange}) => { \r\n  return (\r\n      <form onSubmit={handleAddPerson}>\r\n          <div> name: <input value={newName} onChange={handleNameChange}/> </div>\r\n          <div> number: <input value ={newNumber} onChange={handleNumberChange}/> </div>\r\n          <div> <button type=\"submit\">add</button> </div>\r\n      </form>\r\n  )\r\n}\r\n\r\n\r\n// rendering one person on the screen along with delete button that deletes the person\r\nconst PersonRender = ({person, filter, handleDeleteClick}) => {\r\n// making the filtering case-insensitive\r\n  const upperFilter = filter.toUpperCase()\r\n  const upperName = person.name.toUpperCase()\r\n  //return only the names that apply to the filter condition\r\n  if (upperName.includes(upperFilter)) {\r\n      return (\r\n      <li>\r\n        {person.name} {person.number}\r\n        <DeleteButton \r\n          handler={handleDeleteClick} \r\n          id={person.id} \r\n          text='delete'\r\n        />\r\n      </li>\r\n      )\r\n  } else {\r\n      return null\r\n  }    \r\n}\r\n  \r\n// rendering all persons on the screen\r\nconst PersonsRender = ({persons, filter, handleDeleteClick}) => {\r\n  return (\r\n      <ul>\r\n        {persons.map(person =>     \r\n          <PersonRender \r\n          key={person.name} \r\n          person={person} \r\n          filter={filter}\r\n          handleDeleteClick={handleDeleteClick}\r\n          /> \r\n        )}\r\n      </ul>\r\n  )\r\n}\r\n  \r\n// creating an input field to filter results\r\nconst Filter = ({filter, handleFilterChange}) => {\r\n  return (\r\n      <div> \r\n      filter shown with \r\n      <input value={filter} onChange={handleFilterChange}/>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport {Filter, PersonsRender, PersonForm, Notification}","import axios from 'axios'\r\nconst baseUrl = '/api/persons' //used when production build is generated and moved to persons_expressapp to be used from there\r\n//const baseUrl = 'http://localhost:3001/api/persons' //pointing to backend persons_expressapp when reactapp and expressapp are separate\r\n//const baseUrl = 'http://localhost:3001/persons' //pointing to db.json\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n\r\nconst personService = {getAll, create, update, remove}\r\nexport default personService\r\n\r\n// command to start react app: npm start\r\n// command to start json server db.json: npm run server","import React, { useState, useEffect } from 'react'\nimport {PersonForm, PersonsRender, Filter, Notification} from './components/Person.js'\nimport personService from './services/persons.js'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ message, setMessage ] = useState(null)\n  const [ success, setSuccess ] = useState(true)\n\n\n  // fetching data from server and saving that data to persons\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n\n  const handleAddPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    // check if the name already exists in the phone book (case-insensitive)\n    const samePerson = persons.find(person => person.name.toUpperCase() === personObject.name.toUpperCase())\n    if (samePerson) {\n      // if the person exists but the phone number is different update number after confirmation\n      if (samePerson.number !== personObject.number) {\n        const confirm = window.confirm(`${samePerson.name} is already added to the phonebook, replace old number with a new one?`)\n        if (confirm === true) {\n          personService\n            .update(samePerson.id, personObject)\n            .then(returnedPerson => {\n              setPersons(persons.map(person => person.id !== samePerson.id ? person : returnedPerson))\n              setNewName('')\n              setNewNumber('')\n              setSuccess(true)\n              setMessage(`${personObject.name}'s phone number updated successfully`)\n              setTimeout(() => {\n                setMessage(null)\n              }, 4000)\n            })\n            // catch the error in case the person was deleted before the update went through\n            .catch(error => {\n              setPersons(persons.filter(p => p.id !== samePerson.id))\n              setSuccess(false)\n              setMessage(`${personObject.name} was already deleted from the phone book`)\n              setTimeout(() => {\n                setMessage(null)\n              }, 4000)\n            })\n        }\n      }\n      else {\n        setSuccess(false)\n        setMessage(`${newName} is already added to the phonebook.`)\n        setTimeout(() => {\n          setMessage(null)\n        }, 4000)\n      }  \n    }\n    // check if the input phone number is really a number \n    else if (isNaN(personObject.number)) {\n      setSuccess(false)\n      setMessage(`${newNumber} is not a valid phone number.`)\n      setTimeout(() => {\n        setMessage(null)\n      }, 4000)\n    }\n    // check that the name or number is not left blank\n    else if (personObject.name === '' || personObject.number === '') {\n      setSuccess(false)\n      setMessage(`Please add a name and a number.`)\n      setTimeout(() => {\n        setMessage(null)\n      }, 4000)\n    }\n    // if the person doesn't exist yet, has a name and the number is a number let's add personObject to the phone book \n    else {\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          setSuccess(true)\n          setMessage(`${personObject.name} added to the phonebook`)\n          setTimeout(() => {\n            setMessage(null)\n          }, 4000)\n        }) \n    } \n  }\n\n  const handleNameChange = (event) => {\n    // event.target.value contains whatever is written in the corresponding input box at the moment\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n\n  const handleDeleteClick = (id) => { \n    const confirm = window.confirm(\"Are you sure you want to delete this person?\")\n    if (confirm === true) {\n      const personToDelete = persons.find(person => person.id === id)\n      personService\n        .remove(id)\n        .then(() => {\n          setPersons(persons.filter(p => p.id !== id))\n          setSuccess(true)\n          setMessage(`${personToDelete.name} successfully deleted`)\n          setTimeout(() => {\n            setMessage(null)\n          }, 4000)\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h1> Phonebook </h1>\n      <Notification \n        message={message}\n        success={success}\n      />\n      <Filter \n        filter={filter} \n        handleFilterChange={handleFilterChange}\n      />\n      <h2> Add a new </h2>\n      <PersonForm \n        handleAddPerson={handleAddPerson} \n        newName={newName} \n        newNumber={newNumber} \n        handleNameChange={handleNameChange} \n        handleNumberChange={handleNumberChange}\n      />\n      <h2> Numbers </h2>\n      <PersonsRender \n        persons={persons} \n        filter={filter} \n        handleDeleteClick={handleDeleteClick}\n      />   \n    </div>\n  )\n}\n\n\nexport default App\n\n// start react app: npm start\n// start json server: npm run server","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}